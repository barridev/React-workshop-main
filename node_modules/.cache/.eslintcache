[{"/Users/macjulienbarri/Desktop/React-workshop-main/src/index.tsx":"1","/Users/macjulienbarri/Desktop/React-workshop-main/src/reportWebVitals.ts":"2","/Users/macjulienbarri/Desktop/React-workshop-main/src/App.tsx":"3","/Users/macjulienbarri/Desktop/React-workshop-main/src/components/PostsList.tsx":"4","/Users/macjulienbarri/Desktop/React-workshop-main/src/private/Header.tsx":"5","/Users/macjulienbarri/Desktop/React-workshop-main/src/components/EditPost.tsx":"6","/Users/macjulienbarri/Desktop/React-workshop-main/src/components/UserProfile.tsx":"7","/Users/macjulienbarri/Desktop/React-workshop-main/src/components/AllUsers.tsx":"8","/Users/macjulienbarri/Desktop/React-workshop-main/src/components/ImageGalleryPicker.tsx":"9","/Users/macjulienbarri/Desktop/React-workshop-main/src/components/PostItem.tsx":"10","/Users/macjulienbarri/Desktop/React-workshop-main/src/private/Field.tsx":"11","/Users/macjulienbarri/Desktop/React-workshop-main/src/private/SelectedImage.tsx":"12","/Users/macjulienbarri/Desktop/React-workshop-main/src/private/Checkmark.tsx":"13","/Users/macjulienbarri/Desktop/React-workshop-main/src/api/post.ts":"14","/Users/macjulienbarri/Desktop/React-workshop-main/src/api/user.ts":"15"},{"size":500,"mtime":1649060920000,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1649060920000,"results":"18","hashOfConfig":"17"},{"size":850,"mtime":1649060920000,"results":"19","hashOfConfig":"17"},{"size":1279,"mtime":1649669526105,"results":"20","hashOfConfig":"17"},{"size":1617,"mtime":1649060920000,"results":"21","hashOfConfig":"17"},{"size":7096,"mtime":1649754744931,"results":"22","hashOfConfig":"17"},{"size":1142,"mtime":1649060920000,"results":"23","hashOfConfig":"17"},{"size":95,"mtime":1649060920000,"results":"24","hashOfConfig":"17"},{"size":2739,"mtime":1649060920000,"results":"25","hashOfConfig":"17"},{"size":1732,"mtime":1649060920000,"results":"26","hashOfConfig":"17"},{"size":336,"mtime":1649060920000,"results":"27","hashOfConfig":"17"},{"size":2684,"mtime":1649060920000,"results":"28","hashOfConfig":"17"},{"size":846,"mtime":1649060920000,"results":"29","hashOfConfig":"17"},{"size":1455,"mtime":1649751585733,"results":"30","hashOfConfig":"17"},{"size":1681,"mtime":1649750320195,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1szfywp",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"45"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/macjulienbarri/Desktop/React-workshop-main/src/index.tsx",[],[],"/Users/macjulienbarri/Desktop/React-workshop-main/src/reportWebVitals.ts",[],[],"/Users/macjulienbarri/Desktop/React-workshop-main/src/App.tsx",[],[],"/Users/macjulienbarri/Desktop/React-workshop-main/src/components/PostsList.tsx",["81"],[],"import React, { useEffect, useState } from 'react'\nimport { getPosts } from '../api/post'\nimport { Post } from '../api/types'\nimport PostItem from './PostItem'\n\nconst PostsList = () => {\n    const [posts, setPosts] = useState<Array<Post>>([])\n    const [loading, setLoading] = useState(false)\n\n    // getPosts()\n\n    async function _getPosts() {\n        console.log(\"useEffect\");\n        const data = await getPosts();\n        console.log(data)\n        setPosts(data);\n    }\n\n    useEffect(() => {\n        _getPosts();\n    }, [])\n\n    function renderItem(values: Post) {\n        return (\n            <div key={values.id}>\n                <PostItem {...values} />\n            </div>\n        )\n    }\n\n    if (loading) {\n        return (\n            <section className=\"hero\">\n                <div className=\"hero-body\">\n                    <p className=\"title\">Loading ...</p>\n                </div>\n            </section>\n        )\n    }\n\n    if (posts.length === 0) {\n        return (\n            <section className=\"hero\">\n                <div className=\"hero-body\">\n                    <p className=\"title\">No Posts</p>\n                </div>\n            </section>\n        )\n    }\n\n    return <ul className=\"post-list\">{posts.map(renderItem)}</ul>\n}\n\nexport default PostsList\n",["82","83"],"/Users/macjulienbarri/Desktop/React-workshop-main/src/private/Header.tsx",["84","85","86"],[],"/Users/macjulienbarri/Desktop/React-workshop-main/src/components/EditPost.tsx",["87","88","89","90"],[],"import React, { useReducer, useState, useEffect } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { Picker_Picture, Post, PostContent, User } from '../api/types'\nimport Field from '../private/Field'\nimport ImageGalleryPicker from './ImageGalleryPicker'\nimport { getPost } from '../api/post'\nimport { getAllUser, getUser } from '../api/user'\n\n\n\ntype FormEvent =\n    | React.ChangeEvent<HTMLTextAreaElement>\n    | React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLSelectElement>\n\ntype FormData = { name: string; value: string | number | undefined }\n\nconst formReducer = (state: Post | PostContent, event: FormData) => {\n    return {\n        ...state,\n        [event.name]: event.value,\n    }\n}\n\n\nconst EditPost = () => {\n    const [users, setUsers] = useState<Array<User>>([])\n    const [showPictureModal, setShowPictureModal] = useState<boolean>(false)\n    const [formData, setFormData] = useReducer(\n        formReducer,\n        {} as Post | PostContent\n    )\n    let { id } = useParams() // post id from url\n    const navigate = useNavigate() // create a navigate function instance\n\n    function handleModalPictureSubmit(picture: Picker_Picture) {\n        setFormData({\n            name: 'postImageUrl',\n            value: picture.src,\n        })\n    }\n\n    async function handleAddOrCreatePost(\n        event: React.FormEvent<HTMLFormElement>\n    ) {\n        // remove default reloading page\n        event.preventDefault()\n\n        // back to Home\n        navigate('/')\n    }\n\n    async function handleDeletePost() {\n        // back to Home\n        navigate('/')\n    }\n\n\n    function handleChange(event: FormEvent) {\n        //\n        const value =\n            event.target.name === 'userId'\n                ? Number(event.target.value)\n                : event.target.value\n        setFormData({\n            name: event.target.name,\n            value,\n        })\n    }\n\n    function convertToFormData(post: Post): void {\n        // helper to convert post data into formData\n        // use it before set formData with API data\n        // ex: convertToFormData(data):\n        ; (Object.keys(post) as Array<keyof typeof post>).map((key) => {\n            setFormData({\n                name: key,\n                value: post[key],\n            })\n        })\n    }\n\n    async function _getPost(id: number) {\n        const data = await getPost(id);\n        convertToFormData(data)\n    }\n\n    async function _getUsers() {\n        const data = await getAllUser();\n        setUsers(data);\n        // console.log('data', data)\n        //convertToFormData(data);\n    }\n\n    useEffect(() => {\n        // chaque fois que l'id change\n        _getUsers();\n    }, []);\n\n\n    useEffect(() => {\n        // chaque fois que l'id change\n        _getPost(Number(id));\n    }, [id]);\n\n    function handleToggleModal() {\n        // Show & Hide picture modal\n        setShowPictureModal((s) => !s)\n    }\n\n    function getSelectedPicture() {\n        // prevent bad request and use a placeholder if no data\n        if (formData.postImageUrl) {\n            return formData.postImageUrl\n        } else {\n            return 'https://via.placeholder.com/320/810b14'\n        }\n    }\n\n    function getSelectedAuthor() {\n        // prevent bad request and use a placeholder if no data\n        if (formData.userId) {\n            const selectedUser = users.find((user) => user.id === formData.userId)\n            if (selectedUser) {\n                return selectedUser.name;\n            }\n            return 'Unknown author'\n        }\n    }\n\n    return (\n        <>\n            <form className=\"post-form\" onSubmit={handleAddOrCreatePost}>\n                <Field label=\"Title\">\n                    <input\n                        onBlur={handleChange}\n                        name=\"title\"\n                        className=\"input\"\n                        type=\"text\"\n                        placeholder=\"Text input\"\n                        value={formData.title}\n                    />\n                </Field>\n                <Field label=\"Content\">\n                    <textarea\n                        onBlur={handleChange}\n                        name=\"body\"\n                        className=\"textarea\"\n                        placeholder=\"e.g. Hello world\"\n                        value={formData.body}\n                    />\n                </Field>\n                <Field label=\"Post creator\">\n                    {!!!id ? (\n                        <div className=\"select\" defaultValue={formData.userId}>\n                            {users.length > 0 && (\n                                <select\n                                    name=\"userId\"\n                                    onChange={handleChange}\n                                    defaultValue={users[0].id}\n                                >\n                                    {users.map((user) => (\n                                        <option key={user.id} value={user.id}>\n                                            {user.name}\n                                        </option>\n                                    ))}\n                                </select>\n                            )}\n                        </div>\n                    ) : (\n                        <label>{getSelectedAuthor()}</label>\n                    )}\n                </Field>\n\n                <Field label=\"Post Picture\">\n                    <input type=\"hidden\" value=\"1\" name=\"postImageID\" />\n                    <div>\n                        <img src={getSelectedPicture()} />\n                        <button\n                            type=\"button\"\n                            className=\"button is-primary\"\n                            onClick={handleToggleModal}\n                        >\n                            Open picker modal\n                        </button>\n                    </div>\n                </Field>\n\n                {!!id && (\n                    <Field label=\"Extra actions\">\n                        <button\n                            type=\"button\"\n                            className=\"button is-warning\"\n                            onClick={handleDeletePost}\n                        >\n                            Delete post\n                        </button>\n                    </Field>\n                )}\n\n                <div className=\"field is-grouped is-grouped-centered\">\n                    <p className=\"control\">\n                        <button type=\"submit\" className=\"button is-primary\">\n                            Submit\n                        </button>\n                    </p>\n                    <p className=\"control\">\n                        <Link to=\"/\" className=\"button is-light\">\n                            Cancel\n                        </Link>\n                    </p>\n                </div>\n            </form>\n            {showPictureModal && (\n                <ImageGalleryPicker\n                    onClose={handleToggleModal}\n                    onSubmit={handleModalPictureSubmit}\n                />\n            )}\n        </>\n    )\n}\n\nexport default EditPost\n","/Users/macjulienbarri/Desktop/React-workshop-main/src/components/UserProfile.tsx",["91","92"],[],"/Users/macjulienbarri/Desktop/React-workshop-main/src/components/AllUsers.tsx",["93"],[],"/Users/macjulienbarri/Desktop/React-workshop-main/src/components/ImageGalleryPicker.tsx",["94","95"],[],"/Users/macjulienbarri/Desktop/React-workshop-main/src/components/PostItem.tsx",["96","97"],[],"/Users/macjulienbarri/Desktop/React-workshop-main/src/private/Field.tsx",[],[],"/Users/macjulienbarri/Desktop/React-workshop-main/src/private/SelectedImage.tsx",["98"],[],"/Users/macjulienbarri/Desktop/React-workshop-main/src/private/Checkmark.tsx",[],[],"/Users/macjulienbarri/Desktop/React-workshop-main/src/api/post.ts",["99","100"],[],"import { Post, PostContent } from './types'\nimport axios from 'axios'\nimport { responsiveFontSizes } from '@mui/material';\n\nconst base_url = 'http://localhost:3004/posts'\n\nasync function getPost(postID: Post['id']): Promise<Post> {\n    // get a unique post\n    // [TODO] remove this return to use a fetch API\n    const response = await fetch(`${base_url}/${postID}`);\n    return await response.json();\n}\n\nasync function getPosts(): Promise<Array<Post>> {\n    // get all posts\n    // [TODO] remove this return to use a fetch API\n    const response = await fetch(base_url)\n    const data = await response.json();\n    return data;\n}\n\nasync function createPost(post: PostContent): Promise<Post> {\n    // create a new post\n    // [TODO] remove this return to use a fetch API\n    return {\n        id: 1,\n        title: 'title',\n        userId: 1,\n        body: 'body',\n        postImageUrl: 'https://picsum.photos/1280/960',\n    }\n}\n\nasync function updatePost(post: Post): Promise<Post> {\n    // update a existing post\n    // [TODO] remove this return to use a fetch API\n    return {\n        id: 1,\n        title: 'title',\n        userId: 1,\n        body: 'body',\n        postImageUrl: 'https://picsum.photos/1280/960',\n    }\n}\n\nasync function deletePost(postID: Post['id']): Promise<Post['id']> {\n    // delete a existing post\n    // [TODO] remove this return to use a fetch API\n    return 1\n}\n\nexport { getPost, getPosts, deletePost, updatePost, createPost }\n","/Users/macjulienbarri/Desktop/React-workshop-main/src/api/user.ts",["101"],[],{"ruleId":"102","severity":1,"message":"103","line":8,"column":21,"nodeType":"104","messageId":"105","endLine":8,"endColumn":31},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":8,"column":17,"nodeType":"112","endLine":8,"endColumn":53},{"ruleId":"113","severity":1,"message":"114","line":9,"column":21,"nodeType":"112","endLine":9,"endColumn":48},{"ruleId":"110","severity":1,"message":"115","line":11,"column":17,"nodeType":"112","endLine":17,"endColumn":18},{"ruleId":"102","severity":1,"message":"116","line":7,"column":22,"nodeType":"104","messageId":"105","endLine":7,"endColumn":29},{"ruleId":"117","severity":1,"message":"118","line":75,"column":69,"nodeType":"119","messageId":"120","endLine":75,"endColumn":71},{"ruleId":"121","severity":1,"message":"122","line":104,"column":8,"nodeType":"123","endLine":104,"endColumn":12,"suggestions":"124"},{"ruleId":"113","severity":1,"message":"114","line":178,"column":25,"nodeType":"112","endLine":178,"endColumn":59},{"ruleId":"102","severity":1,"message":"125","line":7,"column":20,"nodeType":"104","messageId":"105","endLine":7,"endColumn":29},{"ruleId":"102","severity":1,"message":"126","line":9,"column":11,"nodeType":"104","messageId":"105","endLine":9,"endColumn":13},{"ruleId":"102","severity":1,"message":"127","line":1,"column":8,"nodeType":"104","messageId":"105","endLine":1,"endColumn":13},{"ruleId":"102","severity":1,"message":"128","line":14,"column":22,"nodeType":"104","messageId":"105","endLine":14,"endColumn":33},{"ruleId":"102","severity":1,"message":"129","line":16,"column":20,"nodeType":"104","messageId":"105","endLine":16,"endColumn":30},{"ruleId":"102","severity":1,"message":"125","line":6,"column":20,"nodeType":"104","messageId":"105","endLine":6,"endColumn":29},{"ruleId":"130","severity":1,"message":"131","line":13,"column":25,"nodeType":"112","endLine":19,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":86,"column":13,"nodeType":"112","endLine":94,"endColumn":15},{"ruleId":"102","severity":1,"message":"132","line":2,"column":8,"nodeType":"104","messageId":"105","endLine":2,"endColumn":13},{"ruleId":"102","severity":1,"message":"133","line":3,"column":10,"nodeType":"104","messageId":"105","endLine":3,"endColumn":29},{"ruleId":"102","severity":1,"message":"134","line":3,"column":7,"nodeType":"104","messageId":"105","endLine":3,"endColumn":15},"@typescript-eslint/no-unused-vars","'setLoading' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["135"],"no-negated-in-lhs",["136"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'getUser' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_getPost'. Either include it or remove the dependency array.","ArrayExpression",["137"],"'setAuthor' is assigned a value but never used.","'id' is assigned a value but never used.","'React' is defined but never used.","'setPictures' is assigned a value but never used.","'getPicture' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'axios' is defined but never used.","'responsiveFontSizes' is defined but never used.","'base_url' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},"Update the dependencies array to be: [_getPost, id]",{"range":"140","text":"141"},[2804,2808],"[_getPost, id]"]